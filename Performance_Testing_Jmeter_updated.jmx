<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Air Offer">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Generic Data">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">url</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">pwd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Base-Currency" elementType="Argument">
            <stringProp name="Argument.name">Base-Currency</stringProp>
            <stringProp name="Argument.value">AED</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="presenceTypeCode" elementType="Argument">
            <stringProp name="Argument.name">presenceTypeCode</stringProp>
            <stringProp name="Argument.value">CN</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="VersionNumber" elementType="Argument">
            <stringProp name="Argument.name">VersionNumber</stringProp>
            <stringProp name="Argument.value">21.3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">url</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SupplierList" elementType="Argument">
            <stringProp name="Argument.name">SupplierList</stringProp>
            <stringProp name="Argument.value">SQ,QR,BA,AA,1S,TK,UA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FFN" elementType="Argument">
            <stringProp name="Argument.name">FFN</stringProp>
            <stringProp name="Argument.value">101393074</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Email_Supplier" elementType="Argument">
            <stringProp name="Argument.name">Email_Supplier</stringProp>
            <stringProp name="Argument.value">email</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Sup_depCode" elementType="Argument">
            <stringProp name="Argument.name">Sup_depCode</stringProp>
            <stringProp name="Argument.value">MCT</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Sup_ArrCode" elementType="Argument">
            <stringProp name="Argument.name">Sup_ArrCode</stringProp>
            <stringProp name="Argument.value">DXB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ActiveSupplier" elementType="Argument">
            <stringProp name="Argument.name">ActiveSupplier</stringProp>
            <stringProp name="Argument.value">1S</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Card Details Data">
        <collectionProp name="Arguments.arguments">
          <elementProp name="cardBrand" elementType="Argument">
            <stringProp name="Argument.name">cardBrand</stringProp>
            <stringProp name="Argument.value">VI</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cardHolderName" elementType="Argument">
            <stringProp name="Argument.name">cardHolderName</stringProp>
            <stringProp name="Argument.value">Youn Jklam</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cardSecurityCode" elementType="Argument">
            <stringProp name="Argument.name">cardSecurityCode</stringProp>
            <stringProp name="Argument.value">123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cardExpiry" elementType="Argument">
            <stringProp name="Argument.name">cardExpiry</stringProp>
            <stringProp name="Argument.value">12/28</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cardTypeText" elementType="Argument">
            <stringProp name="Argument.name">cardTypeText</stringProp>
            <stringProp name="Argument.value">Credit</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countryName" elementType="Argument">
            <stringProp name="Argument.name">countryName</stringProp>
            <stringProp name="Argument.value">United Arab Emirates</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="postalCode" elementType="Argument">
            <stringProp name="Argument.name">postalCode</stringProp>
            <stringProp name="Argument.value">4600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="streetText" elementType="Argument">
            <stringProp name="Argument.name">streetText</stringProp>
            <stringProp name="Argument.value">str 56</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cityName" elementType="Argument">
            <stringProp name="Argument.name">cityName</stringProp>
            <stringProp name="Argument.value">DXB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="countryCode" elementType="Argument">
            <stringProp name="Argument.name">countryCode</stringProp>
            <stringProp name="Argument.value">AE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <intProp name="HTTPSampler.concurrentPool">6</intProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager">
        <collectionProp name="DNSCacheManager.servers"/>
        <collectionProp name="DNSCacheManager.hosts"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Registration" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Corporate Registration Transaction">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Country List">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ADT TITLE">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IATA Number Checking">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Registration&quot;: {&#xd;
        &quot;IataNumber&quot;: &quot;${randomIATANumber}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Function to generate a random IATA number
def generateIATANumber() {
    // Randomly decide whether the IATA number should have 7 or 8 digits
    def numDigits = Math.random() &lt; 0.5 ? 7 : 8;

    // Generate a number with the specified number of digits
    def min = Math.pow(10, numDigits - 1); // Minimum value for the number of digits
    def max = Math.pow(10, numDigits) - 1; // Maximum value for the number of digits

    // Return the randomly generated number
    return (Math.floor(Math.random() * (max - min + 1)) + min).toInteger();
}

// Generate a random IATA number
def randomIATANumber = generateIATANumber();

// Store the random IATA number in a JMeter variable
vars.put(&quot;randomIATANumber&quot;, randomIATANumber.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unique Email Checking">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;Registration&quot;: {&#xd;
    &quot;Email&quot;: &quot;${uniqueEmail}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Function to generate a random number
def generateRandomNumber(min, max) {
    return (Math.random() * (max - min + 1) + min) as int;
}

// Generate random number for the email
int randomNumber = generateRandomNumber(10000, 99999);

// Create a unique email address using the random number
String uniqueEmail = &quot;younas&quot; + randomNumber + &quot;@mailinator.com&quot;;

// Set the unique email as a JMeter variable to use later in the test
vars.put(&quot;uniqueEmail&quot;, uniqueEmail);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select UAE country Code">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="countryCodes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">countryCodes</stringProp>
                  <stringProp name="Argument.value">AE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Registration">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Registration&quot;: {&#xd;
        &quot;Title&quot;: &quot;Mr&quot;,&#xd;
        &quot;Email&quot;: &quot;${uniqueEmail}&quot;,&#xd;
        &quot;AgentType&quot;: &quot;IATA&quot;,&#xd;
        &quot;OrganizationType&quot;: &quot;CORPORATE&quot;,&#xd;
        &quot;IataNumber&quot;: &quot;${randomIATANumber}&quot;,&#xd;
        &quot;IsMonthly&quot;: &quot;&quot;,&#xd;
        &quot;PackageId&quot;: &quot;&quot;,&#xd;
        &quot;CityCode&quot;: &quot;DXB&quot;,&#xd;
        &quot;CountryCode&quot;: &quot;AE&quot;,&#xd;
        &quot;CountryName&quot;: &quot;United Arab Emirates&quot;,&#xd;
        &quot;CityName&quot;: &quot;Dubai&quot;,&#xd;
        &quot;OrganizationName&quot;: &quot;Air retailer &quot;,&#xd;
        &quot;FirstName&quot;: &quot;Younas&quot;,&#xd;
        &quot;LastName&quot;: &quot;Rehman&quot;,&#xd;
        &quot;Zipcode&quot;: &quot;4600&quot;,&#xd;
        &quot;Address&quot;: &quot;City Center Deira&quot;,&#xd;
        &quot;State&quot;: &quot;Dubai&quot;,&#xd;
        &quot;Phone&quot;: 551574123,&#xd;
        &quot;PhoneCode&quot;: &quot;+971&quot;,&#xd;
        &quot;Designation&quot;: &quot;SQA&quot;,&#xd;
        &quot;TermsAccepted&quot;: true,&#xd;
        &quot;TermsAcceptedTimeStamp&quot;: &quot;2024-09-16 13:31:40&quot;,&#xd;
        &quot;BaseCurrencyCode&quot;: &quot;AED&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RegistrationId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">RegistrationId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.Registration.RegistrationId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Subscription for new Registration ID">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Package configuration">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="isInValidPeriod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isInValidPeriod</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isActive" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isActive</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Package Features">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Registration by ID">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Select Package Transaction">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select Package">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Subscription&quot;:{&quot;RegistrationId&quot;:&quot;${RegistrationId}&quot;,&quot;PackageId&quot;:&quot;PKG264&quot;,&quot;IsMonthly&quot;:true}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Select Package" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SubscriptionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.Subscription.SubscriptionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Subcriptions for Reg Id">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Registration for ID">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Complete Subscriptions Transaction">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete Subscriptions">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Subscription&quot;:{&quot;RegistrationId&quot;:&quot;${RegistrationId}&quot;,&quot;PackageId&quot;:&quot;PKG264&quot;,&quot;IsMonthly&quot;:true,&quot;PackageSubscriptionType&quot;:&quot;SUBSCRIPTION&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate Payment">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;InitiatePayment&quot;:{&quot;SubscriptionId&quot;:&quot;${SubscriptionId}&quot;,&quot;PackageId&quot;:&quot;PKG264&quot;,&quot;IsUpgrade&quot;:false,&quot;PackageSubscriptionType&quot;:&quot;SUBSCRIPTION&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ConfirmPayment">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;ConfirmPayment&quot;:{&quot;PaymentTrackId&quot;:&quot;882eacdd-f42a-4539-ab42-06beb7cecbef&quot;,&quot;PaymentStatus&quot;:&quot;SUCCESS&quot;,&quot;FopType&quot;:&quot;CCVI&quot;,&quot;SubscriptionId&quot;:&quot;SUB2105&quot;,&quot;PackageSubscriptionType&quot;:&quot;SUBSCRIPTION&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def response = prev.getResponseDataAsString()
def responseCode = prev.getResponseCode()

if (responseCode == &apos;200&apos; || (responseCode == &apos;400&apos; &amp;&amp; response.contains(&apos;The provided trackID was not an authorized transaction&apos;))) {
    prev.setSuccessful(true)
} else {
    prev.setSuccessful(false)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Air shopping &amp; Re Shopping">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Generic Data">
          <collectionProp name="Arguments.arguments">
            <elementProp name="BASE_URL_1" elementType="Argument">
              <stringProp name="Argument.name">BASE_URL_1</stringProp>
              <stringProp name="Argument.value">URL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">pwd</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Base-Currency" elementType="Argument">
              <stringProp name="Argument.name">Base-Currency</stringProp>
              <stringProp name="Argument.value">AED</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="presenceTypeCode" elementType="Argument">
              <stringProp name="Argument.name">presenceTypeCode</stringProp>
              <stringProp name="Argument.value">CN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="VersionNumber" elementType="Argument">
              <stringProp name="Argument.name">VersionNumber</stringProp>
              <stringProp name="Argument.value">21.3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="host" elementType="Argument">
              <stringProp name="Argument.name">host</stringProp>
              <stringProp name="Argument.value">url</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SupplierList" elementType="Argument">
              <stringProp name="Argument.name">SupplierList</stringProp>
              <stringProp name="Argument.value">SQ,QR,BA,AA,1S,TK,UA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FFN" elementType="Argument">
              <stringProp name="Argument.name">FFN</stringProp>
              <stringProp name="Argument.value">101393074</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ActiveSupplier" elementType="Argument">
              <stringProp name="Argument.name">ActiveSupplier</stringProp>
              <stringProp name="Argument.value">QR</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Email_Supplier" elementType="Argument">
              <stringProp name="Argument.name">Email_Supplier</stringProp>
              <stringProp name="Argument.value">email</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Sup_depCode" elementType="Argument">
              <stringProp name="Argument.name">Sup_depCode</stringProp>
              <stringProp name="Argument.value">BKK</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Sup_ArrCode" elementType="Argument">
              <stringProp name="Argument.name">Sup_ArrCode</stringProp>
              <stringProp name="Argument.value">DXB</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="departureDate" elementType="Argument">
              <stringProp name="Argument.name">departureDate</stringProp>
              <stringProp name="Argument.value">2024-12-25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">FOR AA (YYYY-MM-DD)</stringProp>
            </elementProp>
            <elementProp name="arrivalDate" elementType="Argument">
              <stringProp name="Argument.name">arrivalDate</stringProp>
              <stringProp name="Argument.value">2025-01-04</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">FOR AA (YYYY-MM-DD)</stringProp>
            </elementProp>
            <elementProp name="FlightNoDepature" elementType="Argument">
              <stringProp name="Argument.name">FlightNoDepature</stringProp>
              <stringProp name="Argument.value">28125555</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">For AA</stringProp>
            </elementProp>
            <elementProp name="FlightNoArrival" elementType="Argument">
              <stringProp name="Argument.name">FlightNoArrival</stringProp>
              <stringProp name="Argument.value">481</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">For AA</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login Transaction">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;UserLogin&quot;:{&quot;UserName&quot;:&quot;${Email_Supplier}&quot;,&quot;Password&quot;:&quot;${password}&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="User ID">
              <stringProp name="JSONPostProcessor.referenceNames">User_Id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.UserId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Profile Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Profile_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.ProfileId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Organization ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Org_Id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.DefaultOrganizationId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Email" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">email</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.Email</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="FirstName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">FirstName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.FirstName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="LastName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">LastName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.LastName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Title" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Title</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.Title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="User-Encoded-Details" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonOutput
import java.util.Base64

// Sample authData structure
def authData = [
    userData: [
        firstName : &apos;${FirstName}&apos;,
        middleName: &apos;&apos;,
        lastName  : &apos;${LastName}&apos;,
        email     : &apos;${email}&apos;,
        title     : &apos;${Title}&apos;
    ]
]

// Prepare loginHrData object
def loginHrData = [
    name : &quot;${authData?.userData?.firstName ?: &apos;&apos;}${authData?.userData?.middleName ?: &apos;&apos;} ${authData?.userData?.lastName ?: &apos;&apos;}&quot;,
    email: authData?.userData?.email ?: &apos;&apos;,
    title: authData?.userData?.title ?: &apos;&apos;
]

// Convert loginHrData to JSON string
def tempData = JsonOutput.toJson(loginHrData)

// Encode to Base64
def bookedByHeader = Base64.getEncoder().encodeToString(tempData.getBytes(&apos;UTF-8&apos;))

// Set JMeter variable
vars.put(&quot;bookedByHeader&quot;, bookedByHeader)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">User-Encoded-Details</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PhoneCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PhoneCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.Title$.data.User.PhoneCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Phone" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Phone</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.User.Phone</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Supplier Configuration">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is SQ">
            <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;SQ&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate SQ">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;SQ&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:true}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate BA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;BA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate 1S">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;1S&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate AA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;AA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate QR">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;QR&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate TK">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;TK&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate UA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;UA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is QR">
            <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;QR&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate QR">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;QR&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:true}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate BA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;BA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate 1S">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;1S&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate AA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;AA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate SQ">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;SQ&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate TK">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;TK&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate UA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;UA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is AA" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;AA&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate AA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;AA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:true}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate BA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;BA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate 1S">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;1S&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate QR">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;QR&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate SQ">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;SQ&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate TK">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;TK&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate UA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;UA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is BA">
            <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;BA&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate BA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;BA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:true}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate AA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;AA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate 1S">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;1S&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate QR">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;QR&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate SQ">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;SQ&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate TK">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;TK&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate UA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;UA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is 1S" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;1S&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate 1S">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;1S&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:true}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate AA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;AA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate BA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;BA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate QR">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;QR&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate SQ">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;SQ&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate TK">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;TK&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate UA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;UA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is TK" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;TK&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate TK">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;TK&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:true}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate AA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;AA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate BA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;BA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate QR">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;QR&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate SQ">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;SQ&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate 1S">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;1S&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate UA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;UA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is UA">
            <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;UA&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate UA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;UA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:true}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate AA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;AA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate BA">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;BA&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate QR">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;QR&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate SQ">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;SQ&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate 1S">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;1S&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeActivate TK">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;SupplierCode&quot;:&quot;TK&quot;,&quot;SupplierProductType&quot;:&quot;FLIGHT&quot;,&quot;IsActive&quot;:false}&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="profileId" elementType="Header">
                <stringProp name="Header.name">profileId</stringProp>
                <stringProp name="Header.value">${Profile_id}</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${access_token}</stringProp>
              </elementProp>
              <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                <stringProp name="Header.value">*</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Base-Currency</stringProp>
                <stringProp name="Header.value">${Base-Currency} </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${host}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Organization &amp; Steppers Data Transaction">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Organization ID">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get currency converter header-list">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">66f1208dec97614b077cc37a</stringProp>
                </elementProp>
                <elementProp name="User-Encoded-Details" elementType="Header">
                  <stringProp name="Header.name">User-Encoded-Details</stringProp>
                  <stringProp name="Header.value">eyJuYW1lIjoicGVyZm9ybWFuY2VvbmUgVGVzdGVyIiwiZW1haWwiOiJwZXJmb3JtYW5jZW9uZUBtYWlsaW5hdG9yLmNvbSIsInRpdGxlIjoiTXIifQ==</stringProp>
                </elementProp>
                <elementProp name="X-B3-TraceId" elementType="Header">
                  <stringProp name="Header.name">X-B3-TraceId</stringProp>
                  <stringProp name="Header.value">9d9607b8c32647250a2dfd44d2a3875a</stringProp>
                </elementProp>
                <elementProp name="x-refresh-token" elementType="Header">
                  <stringProp name="Header.name">x-refresh-token</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJkYjViZjFjMi00ZjVjLTQ1Y2UtODBkYi02YmM0ZmQ4NTZlOTkifQ.eyJleHAiOjE3MjcxMDgyMjgsImlhdCI6MTcyNzA3OTQyOCwianRpIjoiZjkyOTFhMTQtMDgzZS00OTY1LWFmMWQtODhmOGMwM2NlNGZlIiwiaXNzIjoiaHR0cDovLzE5Mi4xNjguMTIuMjE6ODA5MS9yZWFsbXMvYWlycmV0YWlsZXIiLCJhdWQiOiJodHRwOi8vMTkyLjE2OC4xMi4yMTo4MDkxL3JlYWxtcy9haXJyZXRhaWxlciIsInN1YiI6ImY6ZTJhZThhMTYtOWY3NS00ZjA4LWIwOTMtODY4YTA3MTZhMDgxOnBlcmZvcm1hbmNlb25lQG1haWxpbmF0b3IuY29tIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImFyLWFwaS1nYXRld2F5LWNsaWVudCIsInNlc3Npb25fc3RhdGUiOiI4ZDFlN2JkOC0xOGI3LTQyNWItOTJkZS1iNzg4MTc3NWY5NGEiLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiOGQxZTdiZDgtMThiNy00MjViLTkyZGUtYjc4ODE3NzVmOTRhIn0.LpC8IfTmI9BV2dq7E2V10YvcvHBne77MRClN3U8GGUg</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzUxMiJ9.eyJ0aW1lU3RhbXAiOiIyMDI0LTA5LTIzVDA4OjE3OjA4LjM3MTA4NjE5NiIsInVzZXJJZCI6InBlcmZvcm1hbmNlb25lQG1haWxpbmF0b3IuY29tIiwib3JnSWQiOiJPUkcyNDc1In0.KZ8n-qA0J1UbvgTShDjhnbiXcp8u3af5NeyLTkRuUgtKsBGi_EexaEA8s4YKZGeCwkODqjS5Z0uIQ1xuQ1cKZw</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="X-B3-SpanId" elementType="Header">
                  <stringProp name="Header.name">X-B3-SpanId</stringProp>
                  <stringProp name="Header.value">3fd122a3d0de9c66</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Organization Data">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get roles data">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Setup Steppers Status">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get setup-steppers">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Profile and Airports Data Transaction" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Countries List">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get arranger profiles">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tripArranger[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tripArranger[]</stringProp>
                  <stringProp name="Argument.value">I_ARRANGE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">userId</stringProp>
                  <stringProp name="Argument.value">${User_Id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Depature Airports Data">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">Sin</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Depature Airports list">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">SIN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Arrival airports data">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">MAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Arrival airports Lists">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">MAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Air shopping &amp; get profile and airports data Transaction">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Air Shopping">
            <stringProp name="HTTPSampler.domain">cbtqa.airretailer.local</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;destinations&quot;: [&#xd;
        {&#xd;
            &quot;departureAirportCode&quot;: &quot;${Sup_depCode}&quot;,&#xd;
            &quot;departureDate&quot;: &quot;${departureDate}&quot;,&#xd;
            &quot;arrivalAirportCode&quot;: &quot;${Sup_ArrCode}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;departureAirportCode&quot;: &quot;${Sup_ArrCode}&quot;,&#xd;
            &quot;departureDate&quot;: &quot;${arrivalDate}&quot;,&#xd;
            &quot;arrivalAirportCode&quot;: &quot;${Sup_depCode}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;passengers&quot;: [&#xd;
        &quot;ADT&quot;&#xd;
    ],&#xd;
    &quot;travelers&quot;: [&#xd;
        {&#xd;
            &quot;profileId&quot;: &quot;${Profile_id}&quot;,&#xd;
            &quot;userId&quot;: &quot;${User_Id}&quot;,&#xd;
            &quot;title&quot;: &quot;Mr&quot;,&#xd;
            &quot;gender&quot;: &quot;male&quot;,&#xd;
            &quot;firstName&quot;: &quot;performanceone&quot;,&#xd;
            &quot;lastName&quot;: &quot;Tester&quot;,&#xd;
            &quot;email&quot;: &quot;${email}&quot;,&#xd;
            &quot;middleName&quot;: &quot;&quot;,&#xd;
            &quot;birthdate&quot;: &quot;1990-09-23T19:59:59.999Z&quot;,&#xd;
            &quot;passportNumber&quot;: &quot;&quot;,&#xd;
            &quot;nationality&quot;: &quot;AE&quot;,&#xd;
            &quot;passportIssueDate&quot;: &quot;&quot;,&#xd;
            &quot;passportExpiryDate&quot;: &quot;&quot;,&#xd;
            &quot;passportIssuingCountry&quot;: &quot;&quot;,&#xd;
            &quot;phoneCode&quot;: &quot;&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;&quot;,&#xd;
            &quot;ptc&quot;: &quot;ADT&quot;,&#xd;
            &quot;programName&quot;: &quot;&quot;,&#xd;
            &quot;programNumber&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;farePreferences&quot;: [],&#xd;
     &quot;isCalendarSearch&quot;: false,&#xd;
    &quot;searchMode&quot;: 0,&#xd;
    &quot;isReshop&quot;: false,&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="departureDate" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat
import java.util.Calendar

// Retrieve the ActiveSupplier variable
def activeSupplier = vars.get(&quot;ActiveSupplier&quot;) ?: &quot;&quot;
activeSupplier = activeSupplier.trim() // Trim any whitespace

// Log the value for debugging
log.info(&quot;Fetched ActiveSupplier: &apos;&quot; + activeSupplier + &quot;&apos;&quot;)

// Check if the ActiveSupplier is not &quot;AA&quot;
if (!activeSupplier.equals(&quot;AA&quot;)) {


// Get current date
def calendar = Calendar.getInstance()

// Add 2 months to the current date
calendar.add(Calendar.MONTH,
    2)

// Format the date as YYYY-MM-DD
def futureDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(calendar.getTime())

// Store the future date in a JMeter variable
vars.put(&quot;departureDate&quot;, futureDate)
}

</stringProp>
              <stringProp name="TestPlan.comments">departureDate</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ArrivalDate" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat
import java.util.Calendar

// Retrieve the ActiveSupplier variable
def activeSupplier = vars.get(&quot;ActiveSupplier&quot;) ?: &quot;&quot;
activeSupplier = activeSupplier.trim() // Trim any whitespace

// Log the value for debugging
log.info(&quot;Fetched ActiveSupplier: &apos;&quot; + activeSupplier + &quot;&apos;&quot;)

// Check if the ActiveSupplier is not &quot;AA&quot;
if (!activeSupplier.equals(&quot;AA&quot;)) {


// Get current date
def calendar = Calendar.getInstance()

// Add 2 months to the current date for the departure date
calendar.add(Calendar.MONTH, 2)

// Format the departure date as YYYY-MM-DD
def departureDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(calendar.getTime())

// Store the departure date in a JMeter variable
vars.put(&quot;departureDate&quot;, departureDate)

// Now calculate the arrival date by adding 30 days to the departure date
calendar.add(Calendar.DAY_OF_MONTH, 30)

// Format the arrival date as YYYY-MM-DD
def arrivalDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(calendar.getTime())

// Store the arrival date in a JMeter variable
vars.put(&quot;arrivalDate&quot;, arrivalDate)

}
</stringProp>
              <stringProp name="TestPlan.comments">ArrivalDate</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paxjourneyId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">paxjourneyId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.journeyList[*].flightList[*].paxJourneyId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="flightSessionId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">flightSessionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.flightSessionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <stringProp name="TestPlan.comments">$.object.data.journeyList[?(@.flightList[0].segments[?(@.marketingCarrierflightNumber == &apos;${FlightNoDepature}&apos;)])].paxJourneyId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="offerSessionId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">offerSessionId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.offerSessionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IATAsessionID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">IATAsessionID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.IATAsessionID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OwnerID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">OwnerID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.metaDataList[0].OwnerID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Pax journey ID matching" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

// Parse JSON response
def response = prev.getResponseDataAsString()
def json = new JsonSlurper().parseText(response)

// Retrieve variables from JMeter
def activeSupplier = vars.get(&quot;ActiveSupplier&quot;) // &quot;AA&quot; if active supplier is AA, set in JMeter
def targetFlightNumber = vars.get(&quot;FlightNoDepature&quot;) // Target flight number, set in JMeter
def paxjourneyId = null

// Check if active supplier is AA and try to find specific paxJourneyId
if (activeSupplier == &quot;AA&quot;) {
    outerLoop:
    for (journey in json.data.journeyList) {
        for (flight in journey.flightList) {
            for (segment in flight.segments) {
                if (segment.marketingCarrierflightNumber == targetFlightNumber) {
                    paxjourneyId = flight.paxJourneyId
                    break outerLoop
                }
            }
        }
    }
}

// Fallback: If no match found or supplier isn’t AA, retrieve the first paxJourneyId
if (paxjourneyId == null) {
    log.info(&quot;No specific match found or active supplier is not &apos;AA&apos;. Retrieving the first available paxJourneyId.&quot;)
    for (journey in json.data.journeyList) {
        for (flight in journey.flightList) {
            paxjourneyId = flight.paxJourneyId // Pick the first paxJourneyId
            break
        }
        if (paxjourneyId != null) break
    }
}

log.info(&quot;Final paxJourneyId result: &quot; + paxjourneyId)
vars.put(&quot;paxjourneyId&quot;, paxjourneyId)  // Local to this thread
props.put(&quot;paxjourneyId&quot;, paxjourneyId) // Global for all threads</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Arranger Profile">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tripArranger[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tripArranger[]</stringProp>
                  <stringProp name="Argument.value">I_ARRANGE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">userId</stringProp>
                  <stringProp name="Argument.value">${User_Id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Location by depature">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">${Sup_depCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Locations by Arrrival">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">${Sup_ArrCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Fetch &amp; Filter Offer Transaction">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch offers">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;cabinTypeCode&quot;:&quot;Y&quot;,&quot;journeyIds&quot;:[&quot;${__P(paxjourneyId)}&quot;],&quot;bffSessionId&quot;:&quot;${flightSessionId}&quot;,&quot;offerSessionId&quot;:&quot;${offerSessionId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxJourneyRefID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PaxJourneyRefID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyPriceClass[0].PaxJourneyRefID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PriceClassRefID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PriceClassRefID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyPriceClass[0].PriceClassRefID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="priceClassId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">priceClassId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].priceClassId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="secondPaxJourneyRefID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">secondPaxJourneyRefID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyPriceClass[1].PaxJourneyRefID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="offerId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">offerId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].offerId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PTC" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ptc</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].baggage[0].ptc[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Filter flights">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;journeyIds&quot;:[&quot;${PaxJourneyRefID}:${priceClassId}&quot;],&quot;bffSessionId&quot;:&quot;${flightSessionId}&quot;,&quot;offerSessionId&quot;:&quot;${offerSessionId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="firstJourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">firstJourneyId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch offers with firstJourneyId">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;cabinTypeCode&quot;:&quot;Y&quot;,&quot;journeyIds&quot;:[&quot;${PaxJourneyRefID}:${priceClassId}&quot;,&quot;${firstJourneyId}&quot;],&quot;bffSessionId&quot;:&quot;${flightSessionId}&quot;,&quot;offerSessionId&quot;:&quot;${offerSessionId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Booking Data">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Offer Price &amp; Booking Data Transaction" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Orders by travel Start Date">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">1000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="travelStartDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">travelStartDate</stringProp>
                  <stringProp name="Argument.value">${departureDate}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Data from Car">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get flight Settings from Organization">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Types">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Types&quot;:[&quot;${ptc}_TITLE&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Profile">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;ContactInfo&quot;:{&quot;ProfileIds&quot;:[&quot;${Profile_id}&quot;],&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;Type&quot;:&quot;MOBILE&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Travel document">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;TravelDocument&quot;:{&quot;OrgId&quot;:&quot;${Org_Id}&quot;,&quot;ProfileIds&quot;:[&quot;${Profile_id}&quot;],&quot;Type&quot;:&quot;PASSPORT&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PassportNumber" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PassportNumber</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.TravelDocument[0].Number</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="DocumentType" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DocumentType</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.TravelDocument[0].Type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IssuedCountry" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">IssuedCountry</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.TravelDocument[0].IssuedCountry</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Loyalty from Profile">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">3000</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Loyalty&quot;:[&quot;${Profile_id}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Booking met data">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;gender&quot;:{&quot;required&quot;:true}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get pre-booking-supplier-info">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="organizationId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">organizationId</stringProp>
                  <stringProp name="Argument.value">${Org_Id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Offer Price">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="birthdate" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">birthdate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].birthdate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Title" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].title</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paxId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">paxId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].paxId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ptc" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ptc</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].ptc</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="offerId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">offerId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OfferItemID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">OfferItemID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].OfferItemID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="trxId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">trxId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.trxId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxRefID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PaxRefID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].PaxRefID[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="FareTypeCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">FareTypeCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].FareComponent[0].FareTypeCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TotalAmount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TotalAmount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].Price.TotalAmount.Value</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CurCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CurCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].Price.TotalAmount.CurCode</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Pre Ancillary Transaction" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre Ancillary">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;pax&quot;: [&#xd;
        {&#xd;
            &quot;Birthdate&quot;: &quot;${birthdate}&quot;,&#xd;
            &quot;Individual&quot;: {&#xd;
                &quot;GenderCode&quot;: &quot;M&quot;,&#xd;
                &quot;GivenName&quot;: [&#xd;
                    &quot;performanceone&quot;&#xd;
                ],&#xd;
                &quot;Surname&quot;: &quot;Tester&quot;,&#xd;
                &quot;TitleName&quot;: &quot;${title}&quot;&#xd;
            },&#xd;
            &quot;PaxID&quot;: &quot;${paxId}&quot;,&#xd;
            &quot;PTC&quot;: &quot;${ptc}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;orderId&quot;: &quot;${offerId}&quot;,&#xd;
    &quot;trxId&quot;: &quot;${trxId}&quot;,&#xd;
    &quot;ownerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
    &quot;offer&quot;: [&#xd;
        {&#xd;
            &quot;OfferID&quot;: &quot;${offerId}&quot;,&#xd;
            &quot;OwnerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
            &quot;OfferItem&quot;: [&#xd;
                {&#xd;
                    &quot;OfferItemID&quot;: &quot;${OfferItemID}&quot;,&#xd;
                    &quot;PaxSegmentRefID&quot;: [&#xd;
                        &quot;${PaxRefID}&quot;&#xd;
                    ]&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;participatingOrg&quot;: {&#xd;
        &quot;id&quot;: &quot;${Org_Id}&quot;,&#xd;
        &quot;name&quot;: &quot;Air Retailer&quot;&#xd;
    },&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PreAnc_CorrelationID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ANC_CorrelationID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payloadAttributes.CorrelationID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ANC_TrxID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ANC_TrxID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payloadAttributes.TrxID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ANC_OfferId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ANC_OfferId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.OfferId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Pre seat availability Transaction" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre seat availability">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">{{path}}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;trxID&quot;: &quot;${trxId}&quot;,&#xd;
    &quot;DataLists&quot;: {&#xd;
        &quot;PaxList&quot;: {&#xd;
            &quot;Pax&quot;: [&#xd;
                {&#xd;
                    &quot;PaxID&quot;: &quot;${paxId}&quot;,&#xd;
                    &quot;PTC&quot;: &quot;${ptc}&quot;&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    },&#xd;
    &quot;offer&quot;: [&#xd;
        {&#xd;
            &quot;OfferID&quot;: &quot;${offerId}&quot;,&#xd;
            &quot;OwnerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
            &quot;OfferItem&quot;: [&#xd;
                {&#xd;
                    &quot;OfferItemID&quot;: &quot;${OfferItemID}&quot;,&#xd;
                    &quot;PaxRefID&quot;: [&#xd;
                        &quot;${PaxRefID}&quot;&#xd;
                    ]&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;participatingOrg&quot;: {&#xd;
        &quot;id&quot;: &quot;${Org_Id}&quot;,&#xd;
        &quot;name&quot;: &quot;Air Retailer&quot;&#xd;
    },&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="profileId" elementType="Header">
                  <stringProp name="Header.name">profileId</stringProp>
                  <stringProp name="Header.value">${Profile_id}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                  <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                  <stringProp name="Header.value">*</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Base-Currency</stringProp>
                  <stringProp name="Header.value">${Base-Currency} </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${host}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PreSeat_CorrelationID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Seat_CorrelationID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.Response.IATA_SeatAvailabilityRS.PayloadAttributes.CorrelationID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Seat_TrxID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Seat_TrxID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.Response.IATA_SeatAvailabilityRS.PayloadAttributes.TrxID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PreSeat_OfferId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PreSeat_OfferId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.Response.IATA_SeatAvailabilityRS.Response.ALaCarteOffer.OfferID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Instant ticketing other than Sabre">
          <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot; != &quot;1S&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="instant ticketing Transaction">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Organization suppliers">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="profileId" elementType="Header">
                    <stringProp name="Header.name">profileId</stringProp>
                    <stringProp name="Header.value">${Profile_id}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Base-Currency</stringProp>
                    <stringProp name="Header.value">${Base-Currency} </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${host}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Payment Method data for Profile">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="profileId" elementType="Header">
                    <stringProp name="Header.name">profileId</stringProp>
                    <stringProp name="Header.value">${Profile_id}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Base-Currency</stringProp>
                    <stringProp name="Header.value">${Base-Currency} </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${host}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
              <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;QR&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Book and Hold" enabled="true">
                <stringProp name="HTTPSampler.domain">cbtqa.airretailer.local</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">/bff/cbt/v1/shopping/air/order-create/${IATAsessionID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;offerId&quot;: &quot;${offerId}&quot;,&#xd;
    &quot;tripName&quot;: &quot;trip abc&quot;,&#xd;
    &quot;selectedPricedOfferItemSeat&quot;: {&#xd;
        &quot;OfferRefID&quot;: &quot;&quot;,&#xd;
        &quot;SelectedOfferItem&quot;: []&#xd;
    },&#xd;
    &quot;payloadAttributesSeat&quot;: {&#xd;
        &quot;TrxID&quot;: &quot;${trxId}&quot;,&#xd;
        &quot;VersionNumber&quot;: ${VersionNumber}&#xd;
    },&#xd;
    &quot;travelers&quot;: [&#xd;
        {&#xd;
            &quot;paxId&quot;: &quot;${paxId}&quot;,&#xd;
            &quot;userId&quot;: &quot;${User_Id}&quot;,&#xd;
            &quot;title&quot;: &quot;${title}&quot;,&#xd;
            &quot;firstName&quot;: &quot;${FirstName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;${LastName}&quot;,&#xd;
            &quot;gender&quot;: &quot;male&quot;,&#xd;
            &quot;middleName&quot;: &quot;&quot;,&#xd;
            &quot;birthdate&quot;: &quot;${birthdate}&quot;,&#xd;
            &quot;nationality&quot;: &quot;${IssuedCountry}&quot;,&#xd;
            &quot;email&quot;: &quot;${email}&quot;,&#xd;
            &quot;profileId&quot;: &quot;${Profile_id}&quot;,&#xd;
            &quot;ptc&quot;: &quot;${ptc}&quot;,&#xd;
            &quot;isPrimary&quot;: true,&#xd;
            &quot;phoneCode&quot;: &quot;${PhoneCode}&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;${Phone}&quot;,&#xd;
            &quot;passportNumber&quot;: &quot;${PassportNumber}&quot;,&#xd;
            &quot;passportIssuingCountry&quot;: &quot;${IssuedCountry}&quot;,&#xd;
            &quot;passportIssueDate&quot;: &quot;2022-08-31T20:00:00.000Z&quot;,&#xd;
            &quot;passportExpiryDate&quot;: &quot;2039-09-29T20:00:00.000Z&quot;,&#xd;
            &quot;programName&quot;: &quot;EY&quot;,&#xd;
            &quot;programNumber&quot;: &quot;&quot;,&#xd;
            &quot;corporateLoyaltyNumber&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;customFieldInfo&quot;: {},&#xd;
    &quot;farePreference&quot;: &quot;${FareTypeCode}&quot;,&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP HeaderManager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="X-B3-SpanId" elementType="Header">
                      <stringProp name="Header.name">X-B3-SpanId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="User-Encoded-Details" elementType="Header">
                      <stringProp name="Header.name">User-Encoded-Details</stringProp>
                      <stringProp name="Header.value">${bookedByHeader}</stringProp>
                    </elementProp>
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Base-Currency" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="host" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Created from cURL on 2024-10-03T15:59:21.5831786</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Instant Ticketing">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;travelers&quot;: [&#xd;
        {&#xd;
            &quot;paxId&quot;: &quot;${paxId}&quot;,&#xd;
            &quot;birthdate&quot;: &quot;${birthdate}&quot;,&#xd;
            &quot;givenName&quot;: &quot;${FirstName}&quot;,&#xd;
            &quot;gender&quot;: &quot;male&quot;,&#xd;
            &quot;surname&quot;: &quot;${LastName}&quot;,&#xd;
            &quot;countryCallingCode&quot;: &quot;${PhoneCode}&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;${Phone}&quot;,&#xd;
            &quot;countryDialingCode&quot;: &quot;AE&quot;,&#xd;
            &quot;title&quot;: &quot;${title}&quot;,&#xd;
            &quot;ptc&quot;: &quot;${ptc}&quot;,&#xd;
            &quot;email&quot;: &quot;${email}&quot;,&#xd;
            &quot;isPrimary&quot;: true,&#xd;
            &quot;profileId&quot;: &quot;${Profile_id}&quot;,&#xd;
            &quot;passportNumber&quot;: &quot;${PassportNumber}&quot;,&#xd;
            &quot;nationality&quot;: &quot;${IssuedCountry}&quot;,&#xd;
            &quot;userId&quot;: &quot;${User_Id}&quot;,&#xd;
            &quot;firstName&quot;: &quot;${FirstName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;${LastName}&quot;,&#xd;
            &quot;middleName&quot;: &quot;&quot;,&#xd;
            &quot;phoneCode&quot;: &quot;${PhoneCode}&quot;,&#xd;
            &quot;passportIssuingCountry&quot;: &quot;${IssuedCountry}&quot;,&#xd;
            &quot;passportIssueDate&quot;: &quot;2022-08-31T20:00:00.000Z&quot;,&#xd;
            &quot;passportExpiryDate&quot;: &quot;2039-09-29T20:00:00.000Z&quot;,&#xd;
            &quot;programName&quot;: &quot;${OwnerID}&quot;,&#xd;
            &quot;programNumber&quot;: &quot;&quot;,&#xd;
            &quot;corporateLoyaltyNumber&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;offerId&quot;: &quot;${offerId}&quot;,&#xd;
    &quot;payment&quot;: {&#xd;
        &quot;paymentType&quot;: &quot;CC&quot;,&#xd;
        &quot;cardDetails&quot;: {&#xd;
            &quot;cardBrand&quot;: &quot;${cardBrand}&quot;,&#xd;
            &quot;address&quot;: {&#xd;
                &quot;cityName&quot;: &quot;${cityName}&quot;,&#xd;
                &quot;countryCode&quot;: &quot;${countryCode}&quot;,&#xd;
                &quot;countryName&quot;: &quot;${countryName}&quot;,&#xd;
                &quot;postalCode&quot;: &quot;${postalCode}&quot;,&#xd;
                &quot;streetText&quot;: &quot;${streetText}&quot;&#xd;
            },&#xd;
            &quot;cardNumber&quot;: &quot;${cardNumber}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${cardHolderName}&quot;,&#xd;
            &quot;cardSecurityCode&quot;: &quot;${cardSecurityCode}&quot;,&#xd;
            &quot;cardTypeText&quot;: &quot;${cardTypeText}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;${cardExpiry}&quot;&#xd;
        },&#xd;
        &quot;amount&quot;: ${TotalAmount},&#xd;
        &quot;currency&quot;: &quot;${CurCode}&quot;&#xd;
    },&#xd;
    &quot;payloadAttributesSeat&quot;: {&#xd;
        &quot;TrxID&quot;: &quot;${Seat_TrxID}&quot;,&#xd;
        &quot;Timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss)}&quot;,&#xd;
        &quot;CorrelationID&quot;: &quot;${Seat_CorrelationID}&quot;,&#xd;
        &quot;VersionNumber&quot;: ${VersionNumber}&#xd;
    },&#xd;
    &quot;payloadAttributesAncillary&quot;: {&#xd;
        &quot;Timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss)}&quot;,&#xd;
        &quot;CorrelationID&quot;: &quot;${ANC_CorrelationID}&quot;,&#xd;
        &quot;TrxID&quot;: &quot;${ANC_TrxID}&quot;,        &#xd;
        &quot;VersionNumber&quot;: ${VersionNumber}&#xd;
    },&#xd;
    &quot;selectedPricedOfferItemSeat&quot;: {	&#xd;
        &quot;OfferRefID&quot;: &quot;${PreSeat_OfferId}&quot;,&#xd;
        &quot;OwnerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
        &quot;SelectedOfferItem&quot;: []&#xd;
    },&#xd;
    &quot;selectedPricedOfferItemAncillary&quot;: {&#xd;
        &quot;OfferRefID&quot;: &quot;${ANC_OfferId}&quot;,&#xd;
        &quot;OwnerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
        &quot;SelectedOfferItem&quot;: []&#xd;
    },&#xd;
    &quot;customFieldInfo&quot;: {},&#xd;
    &quot;farePreference&quot;: &quot;${FareTypeCode}&quot;,&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;,&#xd;
    &quot;tripName&quot;: &quot;trip test&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="profileId" elementType="Header">
                    <stringProp name="Header.name">profileId</stringProp>
                    <stringProp name="Header.value">${Profile_id}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Base-Currency</stringProp>
                    <stringProp name="Header.value">${Base-Currency} </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${host}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Encoded-Details</stringProp>
                    <stringProp name="Header.value">${bookedByHeader}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OrderID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">OrderID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.Order[0].OrderID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ContactInfoId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ContactInfoID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.ContactInfoList.ContactInfo[0].ContactInfoID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ContactPurposeText" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ContactPurposeText</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.ContactInfoList.ContactInfo[0].ContactPurposeText</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EmailAddress_RS" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">EmailAddress_RS</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.ContactInfoList.ContactInfo[0].EmailAddress[0].EmailAddressText</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IndividualRefID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">IndividualRefID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.ContactInfoList.ContactInfo[0].IndividualRefID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Phone_OrderViewRs" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Phone_OrderViewRs</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.ContactInfoList.ContactInfo[0].Phone</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="contactInfo" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">contactInfo</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.ContactInfoList.ContactInfo[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxList Object" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">PaxList</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.PaxList</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="flightOrderItemId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">OrderItemRefID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.TicketDocInfo[0].ReferencedOrder.OrderItem[0].OrderItemRefID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OriginDest Object" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">OriginDest</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.DataLists.OriginDestList.OriginDest</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TRX_Id_OrderViewRs" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">TRXOrderViewRs</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.PayloadAttributes.TrxID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CabinType Object" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CabinType</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.Order[0].OrderItem[0].FareDetail[0].FareComponent[0].CabinType</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="FareTypeCode Object" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">FareTypeCodeObject</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.Order[0].OrderItem[0].FareDetail[0].FareComponent[0].FareTypeCode</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Booking Ref List Object" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">BookingRefList</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RequestWrapperDTO.Response.IATA_OrderViewRS.Response.Order[0].OrderItem[0].Service[0].BookingRef</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="globalContactInfoJson" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get the extracted JSON array (contactInfo)
def contactInfoJson = vars.get(&quot;contactInfo&quot;)

// Check if the extracted variable is not null or empty
if (contactInfoJson &amp;&amp; !contactInfoJson.trim().isEmpty()) {
    // Store it as a global JMeter property so it can be accessed in other thread groups
    props.put(&quot;globalContactInfoJson&quot;, contactInfoJson)
    log.info(&quot;Global ContactInfoList stored: &quot; + contactInfoJson)
} else {
    log.error(&quot;Failed to extract or store contactInfoList; the variable is null or empty.&quot;)
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="GobalPaxListObject" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get the extracted JSON array (PaxList)
def paxListJson = vars.get(&quot;PaxList&quot;)

// Check if the extracted variable is not null or empty
if (paxListJson &amp;&amp; !paxListJson.trim().isEmpty()) {
    // Store it as a global JMeter property so it can be accessed in other thread groups
    props.put(&quot;GobalPaxListObject&quot;, paxListJson)
    log.info(&quot;Global PaxListObject stored: &quot; + paxListJson)
} else {
    log.error(&quot;Failed to extract or store paxListJson; the variable is null or empty.&quot;)
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Global OrderItemRefID" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get the extracted JSON array (OrderItemRefID)
def orderItemRefIdJson = vars.get(&quot;OrderItemRefID&quot;)

// Check if the extracted variable is not null or empty
if (orderItemRefIdJson &amp;&amp; !orderItemRefIdJson.trim().isEmpty()) {
    // Store it as a global JMeter property so it can be accessed in other thread groups
    props.put(&quot;globalOrderItemRefID&quot;, orderItemRefIdJson)
    log.info(&quot;Global OrderItemRefID stored: &quot; + orderItemRefIdJson)
} else {
    log.error(&quot;Failed to extract or store OrderItemRefID; the variable is null or empty.&quot;)
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Global Order ID" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get the extracted JSON array (OrderID)
def orderIdJson = vars.get(&quot;OrderID&quot;)

// Check if the extracted variable is not null or empty
if (orderIdJson &amp;&amp; !orderIdJson.trim().isEmpty()) {
    // Store it as a global JMeter property so it can be accessed in other thread groups
    props.put(&quot;globalOrderID&quot;, orderIdJson)
    log.info(&quot;Global OrderID stored: &quot; + orderIdJson)
} else {
    log.error(&quot;Failed to extract or store OrderID; the variable is null or empty.&quot;)
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="cardNumber Configuration" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get the ActiveSupplier variable from JMeter
String activeSupplier = vars.get(&quot;ActiveSupplier&quot;);

// Set card number based on the value of ActiveSupplier
if (activeSupplier.equals(&quot;AA&quot;)) {
    // Set card number for AA
    vars.put(&quot;cardNumber&quot;, &quot;4434260000000008&quot;);
} else if (activeSupplier.equals(&quot;SQ&quot;) || activeSupplier.equals(&quot;QR&quot;)) {
    // Set card number for SQ or QR
    vars.put(&quot;cardNumber&quot;, &quot;4000000000000002&quot;);
} else if (activeSupplier.equals(&quot;BA&quot;) || activeSupplier.equals(&quot;1S&quot;)) {
    // Set card number for BA or Sabre
    vars.put(&quot;cardNumber&quot;, &quot;4444333322221111&quot;);
} else {
    // Set default or empty card number if no match
    vars.put(&quot;cardNumber&quot;, &quot;&quot;); 
}

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Get Orders Other than Sabre">
          <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot; != &quot;1S&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Orders Transaction">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user-orgs">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="profileId" elementType="Header">
                    <stringProp name="Header.name">profileId</stringProp>
                    <stringProp name="Header.value">${Profile_id}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Base-Currency</stringProp>
                    <stringProp name="Header.value">${Base-Currency} </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${host}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Encoded-Details</stringProp>
                    <stringProp name="Header.value">${bookedByHeader}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Organization Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Org_Id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.Organization[0].OrganizationId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Organization Name" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Organization_name</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.Organization[0].OrganizationName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Orders by Order ID">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="profileId" elementType="Header">
                    <stringProp name="Header.name">profileId</stringProp>
                    <stringProp name="Header.value">${Profile_id}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Base-Currency</stringProp>
                    <stringProp name="Header.value">${Base-Currency} </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${host}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Encoded-Details</stringProp>
                    <stringProp name="Header.value">${bookedByHeader}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PNR Number" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">PNR_Number</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.order.orders[0].pnrNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">Not Found</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Custom Field Template booking">
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">{{path}}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="profileId" elementType="Header">
                    <stringProp name="Header.name">profileId</stringProp>
                    <stringProp name="Header.value">${Profile_id}</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                    <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                    <stringProp name="Header.value">*</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Base-Currency</stringProp>
                    <stringProp name="Header.value">${Base-Currency} </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${host}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Encoded-Details</stringProp>
                    <stringProp name="Header.value">${bookedByHeader}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Re shop flow other than Sabre" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot; != &quot;1S&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ReShop Flow Transaction">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Re-Shop &gt;&gt; Get Profil and Airport Data Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get arranger profiles">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tripArranger[]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">tripArranger[]</stringProp>
                      <stringProp name="Argument.value">I_ARRANGE</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                      <stringProp name="Argument.value">${User_Id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Depature Airports list">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">name</stringProp>
                      <stringProp name="Argument.value">BKK</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Arrival airports data">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">name</stringProp>
                      <stringProp name="Argument.value">DOH</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Re-Shop &gt;&gt; Reshop Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Reshop">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;destinations&quot;: [&#xd;
        {&#xd;
            &quot;departureAirportCode&quot;: &quot;${Sup_depCode}&quot;,&#xd;
            &quot;departureDate&quot;: &quot;${newDepartureDate}&quot;,&#xd;
            &quot;arrivalAirportCode&quot;: &quot;${Sup_ArrCode}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;departureAirportCode&quot;: &quot;${Sup_ArrCode}&quot;,&#xd;
            &quot;departureDate&quot;: &quot;${newArrivalDate}&quot;,&#xd;
            &quot;arrivalAirportCode&quot;: &quot;${Sup_depCode}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;contactInfoList&quot;: {&#xd;
        &quot;ContactInfo&quot;: [&#xd;
            {&#xd;
                &quot;ContactInfoID&quot;: &quot;${ContactInfoID}&quot;,&#xd;
                &quot;EmailAddress&quot;: [&#xd;
                    {&#xd;
                        &quot;EmailAddressText&quot;: &quot;${EmailAddress_RS}&quot;&#xd;
                    }&#xd;
                ],   &#xd;
                &quot;Phone&quot;: ${Phone_OrderViewRs}               &#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;paxList&quot;: ${PaxList},    &#xd;
    &quot;flightOrderItemId&quot;: [&#xd;
        &quot;${OrderItemRefID}&quot;&#xd;
    ],&#xd;
    &quot;orderId&quot;: &quot;${OrderID}&quot;,&#xd;
    &quot;originDestList&quot;: ${OriginDest},&#xd;
    &#xd;
    &quot;trxId&quot;: &quot;${TRXOrderViewRs}&quot;,&#xd;
    &quot;ownerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
    &quot;reshopCabinype&quot;: ${CabinType},&#xd;
    &#xd;
    &quot;farePreferences&quot;: [&#xd;
        &quot;${FareTypeCode}&quot;&#xd;
    ],&#xd;
    &quot;searchMode&quot;: 0,&#xd;
    &quot;isReshop&quot;: true,&#xd;
    &quot;bookingRefList&quot;: ${BookingRefList},&#xd;
    &#xd;
    &quot;currencyCC&quot;: &quot;${CurCode}&quot;,&#xd;
    &quot;participatingOrg&quot;: {&#xd;
        &quot;id&quot;: &quot;${Org_Id}&quot;,&#xd;
        &quot;name&quot;: &quot;Air Retailer&quot;&#xd;
    },&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;,&#xd;
    &quot;pnrNumber&quot;: &quot;${PNR_Number}&quot;,&#xd;
    &quot;cabinType&quot;: [&#xd;
        {&#xd;
            &quot;CabinTypeCode&quot;: &quot;5&quot;,&#xd;
            &quot;PrefLevel&quot;: {&#xd;
                &quot;PrefLevelCode&quot;: &quot;Preferred&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="departureDate and Arrival Date Value" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import java.text.SimpleDateFormat
import java.util.Calendar

// Get current date
def calendar = Calendar.getInstance()

// Add 1 months to the current date for the departure date
calendar.add(Calendar.MONTH, 1)

// Format the departure date as YYYY-MM-DD
def departureDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(calendar.getTime())

// Store the departure date in a JMeter variable
vars.put(&quot;newDepartureDate&quot;, departureDate)

// Now calculate the arrival date by adding 15 days to the departure date
calendar.add(Calendar.DAY_OF_MONTH, 15)

// Format the arrival date as YYYY-MM-DD
def arrivalDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(calendar.getTime())

// Store the arrival date in a JMeter variable
vars.put(&quot;newArrivalDate&quot;, arrivalDate)
</stringProp>
                  <stringProp name="TestPlan.comments">newDepartureDate</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="cabin Type Code" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">cabinTypeCode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.journeyList[0].flightList[0].cabinClassList[0].cabinCode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paxjourneyId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">paxjourneyId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.journeyList[*].flightList[*].paxJourneyId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="flightSessionId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">flightSessionId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.flightSessionId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="offerSessionId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">offerSessionId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.offerSessionId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IATAsessionID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">IATAsessionID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.IATAsessionID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OwnerID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">OwnerID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.metaDataList[0].OwnerID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get Order ID" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// Retrieve the global property (OrderID) from the previous thread group
def globalOrderID = props.get(&quot;globalOrderID&quot;)

// Check if the property is available and not null
if (globalOrderID != null) {
    // Store it as a local variable to use in this thread group, if needed
    vars.put(&quot;orderID&quot;, globalOrderID)
    log.info(&quot;Successfully retrieved global OrderID: &quot; + globalOrderID)
} else {
    log.error(&quot;Global property &apos;globalOrderID&apos; is not available or is empty.&quot;)
}
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Re-Shop &gt;&gt; get profile and airports data Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get arranger profiles">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tripArranger[]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">tripArranger[]</stringProp>
                      <stringProp name="Argument.value">I_ARRANGE</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                      <stringProp name="Argument.value">${User_Id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Depature Airports Data">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">name</stringProp>
                      <stringProp name="Argument.value">${Sup_depCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Arrival airports data">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">name</stringProp>
                      <stringProp name="Argument.value">${Sup_ArrCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Re-Shop &gt;&gt; Fetch &amp; Filter Offer Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch offers">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;cabinTypeCode&quot;:&quot;${cabinTypeCode}&quot;,&quot;journeyIds&quot;:[&quot;${paxjourneyId}&quot;],&quot;bffSessionId&quot;:&quot;${flightSessionId}&quot;,&quot;offerSessionId&quot;:&quot;${offerSessionId}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxJourneyRefID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">PaxJourneyRefID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyPriceClass[0].PaxJourneyRefID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PriceClassRefID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">PriceClassRefID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyPriceClass[0].PriceClassRefID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="priceClassId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">priceClassId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].priceClassId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="secondPaxJourneyRefID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">secondPaxJourneyRefID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyPriceClass[1].PaxJourneyRefID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="offerId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">offerId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].offerId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PTC" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ptc</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].baggage[0].ptc[0]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Filter flights">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;journeyIds&quot;:[&quot;${PaxJourneyRefID}:${priceClassId}&quot;],&quot;bffSessionId&quot;:&quot;${flightSessionId}&quot;,&quot;offerSessionId&quot;:&quot;${offerSessionId}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="firstJourneyId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">firstJourneyId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].journeyId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch offers with firstJourneyId">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;cabinTypeCode&quot;:&quot;Y&quot;,&quot;journeyIds&quot;:[&quot;${PaxJourneyRefID}:${priceClassId}&quot;,&quot;${firstJourneyId}&quot;],&quot;bffSessionId&quot;:&quot;${flightSessionId}&quot;,&quot;offerSessionId&quot;:&quot;${offerSessionId}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Re-Shop &gt;&gt; Offer Price &amp; Booking Data Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Active supplier is BA">
                <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;BA&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Air offer price">
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="profileId" elementType="Header">
                        <stringProp name="Header.name">profileId</stringProp>
                        <stringProp name="Header.value">${Profile_id}</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                        <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                        <stringProp name="Header.value">*</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Base-Currency</stringProp>
                        <stringProp name="Header.value">${Base-Currency} </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">host</stringProp>
                        <stringProp name="Header.value">${host}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="birthdate" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">birthdate</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].birthdate</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Title" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].title</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paxId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].paxId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ptc" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">ptc</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].ptc</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="offerId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">offerId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OfferItemID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">OfferItemID</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].OfferItemID</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="trxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">trxId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.trxId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxRefID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">PaxRefID</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].PaxRefID[0]</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="FareTypeCode" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">FareTypeCode</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].FareComponent[0].FareTypeCode</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TotalAmount" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">TotalAmount</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerPrice</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CurCode" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">CurCode</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].Price.TotalAmount.CurCode</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Active supplier is Not BA" enabled="true">
                <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot; !=&quot;BA&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Air offer price">
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="profileId" elementType="Header">
                        <stringProp name="Header.name">profileId</stringProp>
                        <stringProp name="Header.value">${Profile_id}</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                        <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                        <stringProp name="Header.value">*</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Base-Currency</stringProp>
                        <stringProp name="Header.value">${Base-Currency} </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">host</stringProp>
                        <stringProp name="Header.value">${host}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="birthdate" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">birthdate</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].birthdate</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Title" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].title</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paxId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].paxId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ptc" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">ptc</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.travellers[0].ptc</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="offerId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">offerId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OfferItemID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">OfferItemID</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].OfferItemID</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="trxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">trxId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.trxId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxRefID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">PaxRefID</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].PaxRefID[0]</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="FareTypeCode" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">FareTypeCode</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].FareComponent[0].FareTypeCode</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TotalAmount" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">TotalAmount</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.priceBreakdown[0].diffPrice.totalAmount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CurCode" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">CurCode</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.response.offerItemList[0].FareDetail[0].Price.TotalAmount.CurCode</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Data From Car">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Template booking page">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Orders by travel Start Date">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">1000</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="travelStartDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">travelStartDate</stringProp>
                      <stringProp name="Argument.value">${departureDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get flight Settings from Organization">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Organization suppliers">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select UAE country Code">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="countryCodes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">countryCodes</stringProp>
                      <stringProp name="Argument.value">${countryCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Re-Shop &gt;&gt; Re issue">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re issue" enabled="false">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;trxId&quot;: &quot;${trxId}&quot;,&#xd;
    &quot;sessionId&quot;: &quot;${IATAsessionID}&quot;,&#xd;
    &quot;offerId&quot;: &quot;${offerId}&quot;,&#xd;
    &quot;payment&quot;: {&#xd;
        &quot;paymentType&quot;: &quot;CC&quot;,&#xd;
        &quot;cardDetails&quot;: {&#xd;
            &quot;cardBrand&quot;: &quot;${cardBrand}&quot;,&#xd;
            &quot;address&quot;: {&#xd;
                &quot;cityName&quot;: &quot;${cityName}&quot;,&#xd;
                &quot;countryCode&quot;: &quot;${countryCode}&quot;,&#xd;
                &quot;countryName&quot;: &quot;${countryName}&quot;,&#xd;
                &quot;postalCode&quot;: &quot;${postalCode}&quot;,&#xd;
                &quot;streetText&quot;: &quot;${streetText}&quot;&#xd;
            },&#xd;
            &quot;cardNumber&quot;: &quot;${cardNumber}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${cardHolderName}&quot;,&#xd;
            &quot;cardSecurityCode&quot;: &quot;${cardSecurityCode}&quot;,&#xd;
            &quot;cardTypeText&quot;: &quot;${cardTypeText}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;${cardExpiry}&quot;&#xd;
        },&#xd;
        &quot;amount&quot;: ${TotalAmount},&#xd;
        &quot;currency&quot;: &quot;${CurCode}&quot;&#xd;
    },&#xd;
    &quot;currencyCC&quot;: &quot;${CurCode}&quot;,&#xd;
    &quot;farePreference&quot;: &quot;${FareTypeCode}&quot;,&#xd;
    &quot;PaxList&quot;: ${PaxList},&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Encoded-Details</stringProp>
                      <stringProp name="Header.value">${bookedByHeader}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OrderID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">OrderID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.Response.IATA_OrderViewRS.Response.Order[0].OrderID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="cardNumber Configuration" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// Get the ActiveSupplier variable from JMeter
String activeSupplier = vars.get(&quot;ActiveSupplier&quot;);

// Set card number based on the value of ActiveSupplier
if (activeSupplier.equals(&quot;AA&quot;)) {
    // Set card number for AA
    vars.put(&quot;cardNumber&quot;, &quot;4434260000000008&quot;);
} else if (activeSupplier.equals(&quot;SQ&quot;) || activeSupplier.equals(&quot;QR&quot;)) {
    // Set card number for SQ or QR
    vars.put(&quot;cardNumber&quot;, &quot;4000000000000002&quot;);
} else if (activeSupplier.equals(&quot;BA&quot;) || activeSupplier.equals(&quot;1S&quot;)) {
    // Set card number for BA or Sabre
    vars.put(&quot;cardNumber&quot;, &quot;4444333322221111&quot;);
} else {
    // Set default or empty card number if no match
    vars.put(&quot;cardNumber&quot;, &quot;&quot;); 
}

</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is BA">
                <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot;==&quot;BA&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re issue">
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;trxId&quot;: &quot;${trxId}&quot;,&#xd;
    &quot;payment&quot;: {&#xd;
        &quot;paymentType&quot;: &quot;CC&quot;,&#xd;
        &quot;cardDetails&quot;: {&#xd;
            &quot;cardBrand&quot;: &quot;${cardBrand}&quot;,&#xd;
            &quot;address&quot;: {&#xd;
                &quot;cityName&quot;: &quot;${cityName}&quot;,&#xd;
                &quot;countryCode&quot;: &quot;${countryCode}&quot;,&#xd;
                &quot;countryName&quot;: &quot;${countryName}&quot;,&#xd;
                &quot;postalCode&quot;: &quot;${postalCode}&quot;,&#xd;
                &quot;streetText&quot;: &quot;${streetText}&quot;&#xd;
            },&#xd;
            &quot;cardNumber&quot;: &quot;${cardNumber}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${cardHolderName}&quot;,&#xd;
            &quot;cardSecurityCode&quot;: &quot;${cardSecurityCode}&quot;,&#xd;
            &quot;cardTypeText&quot;: &quot;${cardTypeText}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;${cardExpiry}&quot;&#xd;
        },&#xd;
        &quot;amount&quot;: ${TotalAmount},&#xd;
        &quot;currency&quot;: &quot;${CurCode}&quot;&#xd;
    },&#xd;
    &quot;currencyCC&quot;: &quot;${CurCode}&quot;,&#xd;
    &quot;farePreference&quot;: &quot;${FareTypeCode}&quot;,&#xd;
    &quot;PaxList&quot;: ${PaxList},&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;,&#xd;
    &quot;ContactInfoList&quot;: {&#xd;
        &quot;ContactInfo&quot;: [&#xd;
            {&#xd;
                &quot;ContactInfoID&quot;:&quot;${ContactInfoID}&quot;,&#xd;
                &quot;EmailAddress&quot;: [&#xd;
                    {&#xd;
                        &quot;EmailAddressText&quot;: &quot;${EmailAddress_RS}&quot;&#xd;
                    }&#xd;
                ],&#xd;
                &quot;Phone&quot;: [&#xd;
                    {&#xd;
                        &quot;ContactTypeText&quot;: &quot;Mobile&quot;,&#xd;
                        &quot;PhoneNumber&quot;: &quot;${Phone}&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;participatingOrg&quot;: {&#xd;
        &quot;id&quot;: &quot;${Org_Id}&quot;,&#xd;
        &quot;name&quot;: &quot;Air Retailer&quot;&#xd;
    },&#xd;
    &quot;augmentationPoint&quot;: {&#xd;
        &quot;Any&quot;: [&#xd;
            {&#xd;
                &quot;DeleteOrderItem&quot;: [&#xd;
                    {&#xd;
                        &quot;OrderItemRefID&quot;:  &quot;${OrderItemRefID}&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;selectedPricedOffer&quot;: [&#xd;
        {&#xd;
            &quot;OwnerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
            &quot;OfferRefID&quot;: &quot;${offerId}&quot;,&#xd;
            &quot;SelectedOfferItem&quot;: [&#xd;
                {&#xd;
                    &quot;PaxRefID&quot;: [&#xd;
                        &quot;${PaxRefID}&quot;&#xd;
                    ],&#xd;
                    &quot;OfferItemRefID&quot;: &quot;${OfferItemID}&quot;&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;orderID&quot;: &quot;${OrderID}&quot;,&#xd;
    &quot;ownerCode&quot;: &quot;${OwnerID}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="profileId" elementType="Header">
                        <stringProp name="Header.name">profileId</stringProp>
                        <stringProp name="Header.value">${Profile_id}</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                        <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                        <stringProp name="Header.value">*</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Base-Currency</stringProp>
                        <stringProp name="Header.value">${Base-Currency} </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">host</stringProp>
                        <stringProp name="Header.value">${host}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">User-Encoded-Details</stringProp>
                        <stringProp name="Header.value">${bookedByHeader}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OrderID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">OrderID</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.Response.IATA_OrderViewRS.Response.Order[0].OrderID</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Get the ActiveSupplier variable from JMeter
String activeSupplier = vars.get(&quot;ActiveSupplier&quot;);

// Set card number based on the value of ActiveSupplier
if (activeSupplier.equals(&quot;AA&quot;)) {
    // Set card number for AA
    vars.put(&quot;cardNumber&quot;, &quot;4434260000000008&quot;);
} else if (activeSupplier.equals(&quot;SQ&quot;) || activeSupplier.equals(&quot;QR&quot;)) {
    // Set card number for SQ or QR
    vars.put(&quot;cardNumber&quot;, &quot;4000000000000002&quot;);
} else if (activeSupplier.equals(&quot;BA&quot;) || activeSupplier.equals(&quot;1S&quot;)) {
    // Set card number for BA or Sabre
    vars.put(&quot;cardNumber&quot;, &quot;4444333322221111&quot;);
} else {
    // Set default or empty card number if no match
    vars.put(&quot;cardNumber&quot;, &quot;&quot;); 
}

</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ActiveSupplier is NOT BA">
                <stringProp name="IfController.condition">${__groovy(&quot;${ActiveSupplier}&quot; != &quot;BA&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re issue" enabled="false">
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;trxId&quot;: &quot;${trxId}&quot;,&#xd;
    &quot;payment&quot;: {&#xd;
        &quot;paymentType&quot;: &quot;CC&quot;,&#xd;
        &quot;cardDetails&quot;: {&#xd;
            &quot;cardBrand&quot;: &quot;${cardBrand}&quot;,&#xd;
            &quot;address&quot;: {&#xd;
                &quot;cityName&quot;: &quot;${cityName}&quot;,&#xd;
                &quot;countryCode&quot;: &quot;${countryCode}&quot;,&#xd;
                &quot;countryName&quot;: &quot;${countryName}&quot;,&#xd;
                &quot;postalCode&quot;: &quot;${postalCode}&quot;,&#xd;
                &quot;streetText&quot;: &quot;${streetText}&quot;&#xd;
            },&#xd;
            &quot;cardNumber&quot;: &quot;${cardNumber}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${cardHolderName}&quot;,&#xd;
            &quot;cardSecurityCode&quot;: &quot;${cardSecurityCode}&quot;,&#xd;
            &quot;cardTypeText&quot;: &quot;${cardTypeText}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;${cardExpiry}&quot;&#xd;
        },&#xd;
        &quot;amount&quot;: ${TotalAmount},&#xd;
        &quot;currency&quot;: &quot;${CurCode}&quot;&#xd;
    },&#xd;
    &quot;currencyCC&quot;: &quot;${CurCode}&quot;,&#xd;
    &quot;farePreference&quot;: &quot;${FareTypeCode}&quot;,&#xd;
    &quot;PaxList&quot;: ${PaxList},&#xd;
    &quot;presenceTypeCode&quot;: &quot;${presenceTypeCode}&quot;,&#xd;
    &quot;ContactInfoList&quot;: {&#xd;
        &quot;ContactInfo&quot;: [&#xd;
            {&#xd;
                &quot;ContactInfoID&quot;:&quot;${ContactInfoID}&quot;,&#xd;
                &quot;EmailAddress&quot;: [&#xd;
                    {&#xd;
                        &quot;EmailAddressText&quot;: &quot;${EmailAddress_RS}&quot;&#xd;
                    }&#xd;
                ],&#xd;
                &quot;Phone&quot;: [&#xd;
                    {&#xd;
                        &quot;ContactTypeText&quot;: &quot;Mobile&quot;,&#xd;
                        &quot;PhoneNumber&quot;: &quot;${Phone}&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;participatingOrg&quot;: {&#xd;
        &quot;id&quot;: &quot;${Org_Id}&quot;,&#xd;
        &quot;name&quot;: &quot;Air Retailer&quot;&#xd;
    },&#xd;
    &quot;augmentationPoint&quot;: {&#xd;
        &quot;Any&quot;: [&#xd;
            {&#xd;
                &quot;DeleteOrderItem&quot;: [&#xd;
                    {&#xd;
                        &quot;OrderItemRefID&quot;:  &quot;${OrderItemRefID}&quot;&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;selectedPricedOffer&quot;: [&#xd;
        {&#xd;
            &quot;OwnerCode&quot;: &quot;${OwnerID}&quot;,&#xd;
            &quot;OfferRefID&quot;: &quot;${OfferItemID}&quot;,&#xd;
            &quot;SelectedOfferItem&quot;: [&#xd;
                {&#xd;
                    &quot;PaxRefID&quot;: [&#xd;
                        &quot;PAX1&quot;&#xd;
                    ],&#xd;
                    &quot;OfferItemRefID&quot;: &quot;${OfferItemRefID}&quot;&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;orderID&quot;: &quot;${OrderID}&quot;,&#xd;
    &quot;ownerCode&quot;: &quot;${OwnerID}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="profileId" elementType="Header">
                        <stringProp name="Header.name">profileId</stringProp>
                        <stringProp name="Header.value">${Profile_id}</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                        <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                        <stringProp name="Header.value">*</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Base-Currency</stringProp>
                        <stringProp name="Header.value">${Base-Currency} </stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">host</stringProp>
                        <stringProp name="Header.value">${host}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">User-Encoded-Details</stringProp>
                        <stringProp name="Header.value">${bookedByHeader}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OrderID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">OrderID</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.Response.IATA_OrderViewRS.Response.Order[0].OrderID</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Get the ActiveSupplier variable from JMeter
String activeSupplier = vars.get(&quot;ActiveSupplier&quot;);

// Set card number based on the value of ActiveSupplier
if (activeSupplier.equals(&quot;AA&quot;)) {
    // Set card number for AA
    vars.put(&quot;cardNumber&quot;, &quot;4434260000000008&quot;);
} else if (activeSupplier.equals(&quot;SQ&quot;) || activeSupplier.equals(&quot;QR&quot;)) {
    // Set card number for SQ or QR
    vars.put(&quot;cardNumber&quot;, &quot;4000000000000002&quot;);
} else if (activeSupplier.equals(&quot;BA&quot;) || activeSupplier.equals(&quot;1S&quot;)) {
    // Set card number for BA or Sabre
    vars.put(&quot;cardNumber&quot;, &quot;4444333322221111&quot;);
} else {
    // Set default or empty card number if no match
    vars.put(&quot;cardNumber&quot;, &quot;&quot;); 
}

</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Re-Shop &gt;&gt; Get Orders Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user-orgs">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Encoded-Details</stringProp>
                      <stringProp name="Header.value">${bookedByHeader}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Organization Id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">Org_Id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.Organization[0].OrganizationId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Organization Name" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">Organization_name</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.Organization[0].OrganizationName</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Booking template page">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Encoded-Details</stringProp>
                      <stringProp name="Header.value">${bookedByHeader}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Orders by Order ID">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Encoded-Details</stringProp>
                      <stringProp name="Header.value">${bookedByHeader}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user-orgs">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Encoded-Details</stringProp>
                      <stringProp name="Header.value">${bookedByHeader}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Organization suppliers">
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">{{path}}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="profileId" elementType="Header">
                      <stringProp name="Header.name">profileId</stringProp>
                      <stringProp name="Header.value">${Profile_id}</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="Access-Control-Allow-Origin" elementType="Header">
                      <stringProp name="Header.name">Access-Control-Allow-Origin</stringProp>
                      <stringProp name="Header.value">*</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Base-Currency</stringProp>
                      <stringProp name="Header.value">${Base-Currency} </stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">host</stringProp>
                      <stringProp name="Header.value">${host}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">User-Encoded-Details</stringProp>
                      <stringProp name="Header.value">${bookedByHeader}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Performance Testing data">
          <stringProp name="filename">D:/QA/Performance_testing/Performance_Test_data.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Feature,ActiveSupplier,Email_Supplier,password,Sup_depCode,Sup_ArrCode,presenceTypeCode,cardNumber</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
